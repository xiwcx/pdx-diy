name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Cancel in-progress runs on new pushes to the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install-deps:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    needs: install-deps
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Cache TypeScript build info
        uses: actions/cache@v4
        with:
          path: |
            tsconfig.tsbuildinfo
            .next/cache
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-typescript-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        # Note: This will be very fast due to cache from install-deps job,
        # but provides resilience against cache misses or failures

      - name: Run Biome linting and formatting
        run: pnpm check

      - name: Run TypeScript type checking
        run: pnpm typecheck

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [install-deps, static-analysis]
    strategy:
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Cache Vitest
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.vite
            coverage
          key: ${{ runner.os }}-vitest-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.test.{ts,tsx}', '**/vitest.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-vitest-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-vitest-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        # Note: This will be very fast due to cache from install-deps job,
        # but provides resilience against cache misses or failures

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Extract coverage percentage
        id: coverage
        run: |
          COVERAGE_PERCENT=$(node -e "
            try {
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
              
              let totalStatements = 0;
              let coveredStatements = 0;
              
              for (const filePath in coverage) {
                const fileData = coverage[filePath];
                const statements = fileData.s;
                for (const stmtId in statements) {
                  totalStatements++;
                  if (statements[stmtId] > 0) {
                    coveredStatements++;
                  }
                }
              }
              
              const percent = totalStatements > 0 ? Math.round((coveredStatements / totalStatements) * 100) : 0;
              console.log(percent);
            } catch (e) {
              console.log('0');
            }
          ")
          echo "percentage=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT

      - name: Report coverage
        run: |
          COVERAGE_PERCENT=${{ steps.coverage.outputs.percentage }}
          echo "üìä Test Coverage: $COVERAGE_PERCENT%"

          if [ "$COVERAGE_PERCENT" -ge 80 ]; then
            echo "‚úÖ Excellent coverage!"
          elif [ "$COVERAGE_PERCENT" -ge 60 ]; then
            echo "‚úÖ Good coverage"
          elif [ "$COVERAGE_PERCENT" -ge 40 ]; then
            echo "‚ö†Ô∏è  Coverage could be improved"
          else
            echo "‚ùå Low coverage - consider adding more tests"
          fi

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [install-deps, static-analysis]
    strategy:
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        # Note: This will be very fast due to cache from install-deps job,
        # but provides resilience against cache misses or failures

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/cache/webpack
            tsconfig.tsbuildinfo
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/next.config.js') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-

      - name: Build application
        run: pnpm build
        env:
          # Provide placeholder values for build-time env vars
          AUTH_SECRET: "build-time-placeholder"
          AUTH_RESEND_KEY: "build-time-placeholder"
          AUTH_RESEND_FROM: "build-time-placeholder@example.com"
          DATABASE_URL: "postgresql://placeholder:placeholder@localhost:5432/placeholder"
          POSTHOG_KEY: "phc_placeholder"
          POSTHOG_HOST: "https://app.posthog.com"
          NEXT_PUBLIC_POSTHOG_KEY: "phc_placeholder"
          NEXT_PUBLIC_POSTHOG_HOST: "https://app.posthog.com"
