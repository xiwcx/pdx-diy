name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

# Cancel in-progress runs on new pushes to the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  PNPM_VERSION: "10.15.1"

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Cache TypeScript build info
        uses: actions/cache@v4
        with:
          path: |
            tsconfig.tsbuildinfo
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-typescript-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Biome linting and formatting
        run: pnpm check

      - name: Check YAML formatting (Prettier)
        run: pnpm format:yaml:check

      - name: Run TypeScript type checking
        run: pnpm typecheck

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    strategy:
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Cache Vitest
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.vite
            coverage
          key: ${{ runner.os }}-vitest-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.test.{ts,tsx}', '**/vitest.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-vitest-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-vitest-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Extract coverage percentage
        id: coverage
        run: |
          COVERAGE_PERCENT=$(node -e "
            try {
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
              
              let totalStatements = 0;
              let coveredStatements = 0;
              
              for (const filePath in coverage) {
                const fileData = coverage[filePath];
                const statements = fileData.s;
                for (const stmtId in statements) {
                  totalStatements++;
                  if (statements[stmtId] > 0) {
                    coveredStatements++;
                  }
                }
              }
              
              const percent = totalStatements > 0 ? Math.round((coveredStatements / totalStatements) * 100) : 0;
              console.log(percent);
            } catch (e) {
              console.log('0');
            }
          ")
          echo "percentage=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT

      - name: Report coverage
        run: |
          COVERAGE_PERCENT=${{ steps.coverage.outputs.percentage }}
          echo "üìä Test Coverage: $COVERAGE_PERCENT%"

          if [ "$COVERAGE_PERCENT" -ge 80 ]; then
            echo "‚úÖ Excellent coverage!"
          elif [ "$COVERAGE_PERCENT" -ge 60 ]; then
            echo "‚úÖ Good coverage"
          elif [ "$COVERAGE_PERCENT" -ge 40 ]; then
            echo "‚ö†Ô∏è  Coverage could be improved"
          else
            echo "‚ùå Low coverage - consider adding more tests"
          fi

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: static-analysis
    strategy:
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache TypeScript build info
        uses: actions/cache@v4
        with:
          path: |
            tsconfig.tsbuildinfo
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-typescript-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/cache/webpack
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/next.config.js') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-

      - name: Build application
        run: pnpm build
        env:
          # Provide placeholder values for build-time env vars
          AUTH_SECRET: "build-time-placeholder"
          AUTH_RESEND_KEY: "build-time-placeholder"
          AUTH_RESEND_FROM: "build-time-placeholder@example.com"
          DATABASE_URL: "postgresql://placeholder:placeholder@localhost:5432/placeholder"
          POSTHOG_KEY: "phc_placeholder"
          POSTHOG_HOST: "https://app.posthog.com"
          NEXT_PUBLIC_POSTHOG_KEY: "phc_placeholder"
          NEXT_PUBLIC_POSTHOG_HOST: "https://app.posthog.com"

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [static-analysis, test]
    timeout-minutes: 60
    strategy:
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Cache TypeScript build info
        uses: actions/cache@v4
        with:
          path: |
            tsconfig.tsbuildinfo
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-typescript-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-turbo-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/next.config.js') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-turbo-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-turbo-

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Start test database with Docker Compose
        run: |
          set -euo pipefail
          docker compose up -d test-db
          CONTAINER_ID="$(docker compose ps -q test-db)"
          # Wait for database to be ready
          timeout 60s bash -c 'until docker exec "$CONTAINER_ID" pg_isready -U test -d test; do sleep 2; done'

      - name: Run Playwright tests
        run: pnpm e2e:test

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload Playwright Traces
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: playwright-traces
          path: test-results/
          retention-days: 7

      - name: Clean up test database
        if: always()
        run: |
          docker compose down -v
